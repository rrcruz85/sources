# -*- coding: utf-8 -*-
#/#############################################################################
#
#    Tech-Receptives Solutions Pvt. Ltd.
#    Copyright (C) 2004-TODAY Tech-Receptives(<http://www.techreceptives.com>)
#    Special Credit and Thanks to Thymbra Latinoamericana S.A.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#/#############################################################################
#from osv import osv
#from osv import fields

import time
from openerp.osv import fields, osv, orm
from openerp.tools.translate import _

class OeMedicalPatientEvaluation(osv.Model):
    _name='oemedical.patient.evaluation'
#    _rec_name='identification_code'

    def _get_patient(self, cr, uid, context):
        run_pool = self.pool.get('oemedical.patient')
        run_data = {}
        if context and context.get('active_id', False):
            run_data = run_pool.read(cr, uid, context['active_id'], ['patient_id'])
            patient_id = run_data.get('id', False)
            if patient_id:
                return patient_id
        return False
    
    def button_print_official_report(self, cr, uid, ids, context=None):
        return {
            'type'        : 'ir.actions.report.xml',
            'res_model'   : 'oemedical.patient.evaluation',
            'report_name' : 'oemedical_patient_evaluation_report',
            'report_type' : 'pdf',
        }
    
    _columns={
              'patient_id':fields.many2one('oemedical.patient', 'Patient', required=True),
              'information_source': fields.char(size=256, string='Source',
                                                help="Source of" "Information, eg : Self, relative, friend ..."),
              'tem_info': fields.float('Temperatura', digits=(12,3)),
              'pat_info': fields.char(size=256, string='Presión arterial'),
              #'pdi_info': fields.integer('/'),
              #'rpm_info': fields.integer('Respiraciones por minuto'),
              'ppm_info': fields.integer('Frecuencia cardiaca'),
              'est_info': fields.float('Estatura del paciente (cm)', digits=(12,3)),
              'pes_info': fields.float('Peso del paciente (Kg)', digits=(12,3)),
              'info_diagnosis': fields.text(string='Enfermedad Actual'),
              'evaluation_type': fields.selection([
                                                   ('a', 'Ambulatory'),
                                                   ('e', 'Emergency'),
                                                   ('i', 'Inpatient'),
                                                   ('pa', 'Pre-arranged appointment'),
                                                   ('pc', 'Periodic control'),
                                                   ('p', 'Phone call'),
                                                   ('t', 'Telemedicine'),
                                                   ], string='Type'),
              'actions': fields.one2many('oemedical.directions',
                                         'evaluation_id', string='Procedures',
                                         help='Procedures / Actions to take'),
              'present_illness': fields.text(string='Present Illness'),
              #'evaluation_date': fields.many2one('oemedical.appointment',
              #                                   string='Appointment',
              #                                   help='Enter or select the date / ID of the appointment related to'\
              #                                   ' this evaluation'),
              'evaluation_date': fields.date(string='Date',
                                                 help='Enter or select the date / ID of the appointment related to'\
                                                 ' this evaluation',
                                                 readonly=True, size=256),
              'user_id': fields.many2one('res.users', string='Last Changed by',
                                         readonly=True),
              'doctor': fields.many2one('oemedical.physician', string='Doctor'),
              'next_evaluation': fields.many2one('oemedical.appointment',
                                                 string='Next Appointment',),
#              'derived_from': fields.many2one('oemedical.specialty',
#                                              string='Interconsulta De',
#                                              help='Physician who derived the case'),
              'specialty': fields.many2one('oemedical.specialty',
                                           string='Specialty',),
              'derived_to': fields.many2one('oemedical.specialty',
                                            string='Interconsulta Hacia ',
                                            help='Physician to whom escalate / derive the case'),
              
              'diagnosis': fields.many2many('oemedical.pathology', 'oemedical_evaluation_diagnosis_rel', 'evaluation_id', 'diagnosis_id', 'Presumptive diagnosis'),
              'definitive_diagnosis': fields.many2many('oemedical.pathology', 'oemedical_evaluation_definitivediagnosis_rel', 'evaluation_id', 'definitivediagnosis_id', 'Definitive diagnosis'),
              
              'notes_complaint': fields.text(string='Complaint details'),
              'mdc_info': fields.char(size=256, string='Motivo de Consulta'),
              'eac_info': fields.text(size=256, string='Enfermedad actual'),
              'ena_info': fields.text(string='Examen Físico'),
              'revision_organos':fields.text(string='Revisión de Organos y Sistemas'),
              'rxl_complaint': fields.text(string='Laboratorio y Rayos X'),
              'osat': fields.integer(string='Oxygen Saturation',
                                     help='Oxygen Saturation(arterial).'),
              'evl_info': fields.text(string='Evolución'),
              'dag_info': fields.text(string='Diagnostico'),
              'trt_info': fields.text(string='Tratamiento seguido'),
              'directions': fields.text(string='Tratamiento'),
              #'orientation': fields.boolean(string='Orientation',
              #                              help='Check this box if the patient is disoriented in time and/or'\
              #                              ' space'),
              #'weight': fields.float(string='Weight', help='Weight in Kilos'),
              #'malnutrition': fields.boolean(string='Malnutrition',
              #                               help='Check this box if the patient show signs of malnutrition. If'\
              #                               ' associated  to a disease, please encode the correspondent disease'\
              #                               ' on the patient disease history. For example, Moderate'\
              #                               ' protein-energy malnutrition, E44.0 in ICD-10 encoding'),
              #'height': fields.float(string='Height',
              #                       help='Height in centimeters, eg 175'),
              #'dehydration': fields.boolean(string='Dehydration',
              #                              help='Check this box if the patient show signs of dehydration. If'\
              #                              ' associated  to a disease, please encode the  correspondent disease'\
              #                              ' on the patient disease history. For example, Volume Depletion, E86'\
              #                              ' in ICD-10 encoding'),
              #'tag': fields.integer(string='Last TAGs',
              #                      help='Triacylglycerol(triglicerides) level. Can be approximative'),
              #'tremor': fields.boolean(string='Tremor',
              #                         help='If associated  to a disease, please encode it on the patient'\
              #                         ' disease history'),
              #'evaluation_start': fields.datetime(string='Start', required=True),
              #'loc': fields.integer(string='Level of Consciousness'),
              #'mood': fields.selection([
              #                          ('n', 'Normal'),
              #                          ('s', 'Sad'),
              #                          ('f', 'Fear'),
              #                          ('r', 'Rage'),
              #                          ('h', 'Happy'),
              #                          ('d', 'Disgust'),
              #                          ('e', 'Euphoria'),
              #                          ('fl', 'Flat'),
              #                          ], string='Mood'),
              #'knowledge_current_events': fields.boolean(
              #                                           string='Knowledge of Current Events',
              #                                           help='Check this box if the patient can not respond to public'\
              #                                           ' notorious events'),
              #'signs_and_symptoms': fields.one2many('oemedical.signs_and_symptoms',
              #                                      'evaluation_id',
              #                                      string='Signs and Symptoms',
              #                                      help='Enter the Signs and Symptoms' \
              #                                      ' for the patient in this evaluation.'),
              #'loc_motor': fields.selection([
              #                               ('1', 'Makes no movement'),
              #                               ('2', 'Extension to painful stimuli - decerebrate response -'),
              #                               ('3', 'Abnormal flexion to painful stimuli (decorticate response)'),
              #                               ('4', 'Flexion / Withdrawal to painful stimuli'),
              #                               ('5', 'Localizes painful stimuli'),
              #                               ('6', 'Obeys commands'),
              #                               ], string='Glasgow - Motor'),
              #'reliable_info': fields.boolean(string='Reliable',
              #                                help="Uncheck this option" \
              #                                "if the information provided by the source seems not reliable"),
              #'systolic': fields.integer(string='Systolic Pressure'),
              #'vocabulary': fields.boolean(string='Vocabulary',
              #                             help='Check this box if the patient lacks basic intelectual capacity,'\
              #                             ' when she/he can not describe elementary objects'),
              #'praxis': fields.boolean(string='Praxis',
              #                         help='Check this box if the patient is unable to make voluntary'\
              #                         'movements'),
              #'hip': fields.float(string='Hip',
              #                    help='Hip circumference in centimeters, eg 100'),
              #'memory': fields.boolean(string='Memory',
              #                         help='Check this box if the patient has problems in short or long'\
              #                         ' term memory'),
              #'abstraction': fields.boolean(string='Abstraction',
              #                              help='Check this box if the patient presents abnormalities in'\
              #                              ' abstract reasoning'),
              #'loc_verbal': fields.selection([
              #                                ('1', 'Makes no sounds'),
              #                                ('2', 'Incomprehensible sounds'),
              #                                ('3', 'Utters inappropriate words'),
              #                                ('4', 'Confused, disoriented'),
              #                                ('5', 'Oriented, converses normally'),
              #                                ], string='Glasgow - Verbal'),
              #'glycemia': fields.float(string='Glycemia',
              #                         help='Last blood glucose level. Can be approximative.'),
              #'head_circumference': fields.float(string='Head Circumference',
              #                                   help='Head circumference'),
              #'bmi': fields.float(string='Body Mass Index'),
              #'respiratory_rate': fields.integer(string='Respiratory Rate',
              #                                   help='Respiratory rate expressed in breaths per minute'),
              #'hba1c': fields.float(string='Glycated Hemoglobin',
              #                      help='Last Glycated Hb level. Can be approximative.'),
              #'violent': fields.boolean(string='Violent Behaviour',
              #                          help='Check this box if the patient is agressive or violent at the'\
              #                          ' moment'),
              #'evaluation_summary': fields.text(string='Evaluation Summary'),
              #'cholesterol_total': fields.integer(string='Last Cholesterol'),
              #'diagnostic_hypothesis': fields.one2many('oemedical.diagnostic_hypothesis',
              #                                         'evaluation_id', string='Hypotheses / DDx',
              #                                         help='Presumptive Diagnosis. If no diagnosis can be made'\
              #                                         ', encode the main sign or symptom.'),
              #'judgment': fields.boolean(string='Jugdment',
              #                           help='Check this box if the patient can not interpret basic scenario'\
              #                           ' solutions'),
              #'temperature': fields.float(string='Temperature',
              #                            help='Temperature in celcius'),
              #'secondary_conditions': fields.one2many('oemedical.secondary_condition', 'evaluation_id',
              #                                        string='Secondary Conditions',
              #                                        help="Other, Secondary conditions found on the patient"),
              #'evaluation_endtime': fields.datetime(string='End', required=True),
              #'notes': fields.text(string='Notes'),
              #'calculation_ability': fields.boolean(string='Calculation Ability',
              #                                      help='Check this box if the patient can not do simple arithmetic'\
              #                                      ' problems'),
              #'bpm': fields.integer(string='Heart Rate',
              #                      help='Heart rate expressed in beats per minute'),
              #'chief_complaint': fields.char(size=256, string='Chief Complaint',
              #                               required=True,
              #                               help='Chief Complaint'),
              #'loc_eyes': fields.selection([
              #                              ('1', 'Does not Open Eyes'),
              #                              ('2', 'Opens eyes in response to painful stimuli'),
              #                              ('3', 'Opens eyes in response to voice'),
              #                              ('4', 'Opens eyes spontaneously'),
              #                              ], string='Glasgow - Eyes'),
              #'abdominal_circ': fields.float(string='Waist'),
              #'object_recognition': fields.boolean(string='Object Recognition',
              #                                     help='Check this box if the patient suffers from any sort of gnosia'\
              #                                     ' disorders, such as agnosia, prosopagnosia ...'),
              #'whr': fields.float(string='WHR', help='Waist to hip ratio'),
              #'ldl': fields.integer(string='Last LDL',
              #                      help='Last LDL Cholesterol reading. Can be approximative'),
              #'hdl': fields.integer(string='Last HDL'),
              #'diastolic': fields.integer(string='Diastolic Pressure'),
              }
    
    _defaults = {
              'evaluation_date': time.strftime('%Y-%m-%d'),
              'patient_id': _get_patient,
              }
    
    def _diagnosis_constraint(self, cr, uid, ids):
        for evaluation in self.browse(cr, uid, ids):
            if len(evaluation.diagnosis) + len(evaluation.definitive_diagnosis) > 4: return False
            return True
    
    _constraints = [(_diagnosis_constraint, _('You can not specified more than four diagnosis!'), ['diagnosis', 'definitive_diagnosis'])]
OeMedicalPatientEvaluation()
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
